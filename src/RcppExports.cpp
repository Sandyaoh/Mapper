// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// edgeList_int
IntegerMatrix edgeList_int(const IntegerMatrix& ls_pairs, const List& nodes, const List& ls_node_map);
RcppExport SEXP _Mapper_edgeList_int(SEXP ls_pairsSEXP, SEXP nodesSEXP, SEXP ls_node_mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ls_pairs(ls_pairsSEXP);
    Rcpp::traits::input_parameter< const List& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const List& >::type ls_node_map(ls_node_mapSEXP);
    rcpp_result_gen = Rcpp::wrap(edgeList_int(ls_pairs, nodes, ls_node_map));
    return rcpp_result_gen;
END_RCPP
}
// adjacencyCpp
IntegerMatrix adjacencyCpp(const IntegerMatrix& ls_pairs, const List& nodes, const List& ls_node_map);
RcppExport SEXP _Mapper_adjacencyCpp(SEXP ls_pairsSEXP, SEXP nodesSEXP, SEXP ls_node_mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ls_pairs(ls_pairsSEXP);
    Rcpp::traits::input_parameter< const List& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const List& >::type ls_node_map(ls_node_mapSEXP);
    rcpp_result_gen = Rcpp::wrap(adjacencyCpp(ls_pairs, nodes, ls_node_map));
    return rcpp_result_gen;
END_RCPP
}
// intersectNodes
List intersectNodes(const List& nodes1, const List& nodes2, const IntegerVector& node_ids1, const IntegerVector& node_ids2);
RcppExport SEXP _Mapper_intersectNodes(SEXP nodes1SEXP, SEXP nodes2SEXP, SEXP node_ids1SEXP, SEXP node_ids2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type nodes1(nodes1SEXP);
    Rcpp::traits::input_parameter< const List& >::type nodes2(nodes2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type node_ids1(node_ids1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type node_ids2(node_ids2SEXP);
    rcpp_result_gen = Rcpp::wrap(intersectNodes(nodes1, nodes2, node_ids1, node_ids2));
    return rcpp_result_gen;
END_RCPP
}
// valid_pairs
IntegerMatrix valid_pairs(const IntegerMatrix& level_set_pairs);
RcppExport SEXP _Mapper_valid_pairs(SEXP level_set_pairsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type level_set_pairs(level_set_pairsSEXP);
    rcpp_result_gen = Rcpp::wrap(valid_pairs(level_set_pairs));
    return rcpp_result_gen;
END_RCPP
}
// constructFixedLevelSets
List constructFixedLevelSets(const NumericMatrix& filter_values, const IntegerMatrix& index_set, const NumericVector& overlap, const IntegerVector& number_intervals, const NumericMatrix& filter_range, const NumericVector& filter_len);
RcppExport SEXP _Mapper_constructFixedLevelSets(SEXP filter_valuesSEXP, SEXP index_setSEXP, SEXP overlapSEXP, SEXP number_intervalsSEXP, SEXP filter_rangeSEXP, SEXP filter_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type filter_values(filter_valuesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type index_set(index_setSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type number_intervals(number_intervalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type filter_range(filter_rangeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type filter_len(filter_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(constructFixedLevelSets(filter_values, index_set, overlap, number_intervals, filter_range, filter_len));
    return rcpp_result_gen;
END_RCPP
}
// constructRestrainedLevelSets
List constructRestrainedLevelSets(const NumericMatrix& filter_values, const IntegerMatrix& index_set, const NumericVector& interval_length, const NumericVector& step_size, const NumericVector& filter_min);
RcppExport SEXP _Mapper_constructRestrainedLevelSets(SEXP filter_valuesSEXP, SEXP index_setSEXP, SEXP interval_lengthSEXP, SEXP step_sizeSEXP, SEXP filter_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type filter_values(filter_valuesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type index_set(index_setSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval_length(interval_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type filter_min(filter_minSEXP);
    rcpp_result_gen = Rcpp::wrap(constructRestrainedLevelSets(filter_values, index_set, interval_length, step_size, filter_min));
    return rcpp_result_gen;
END_RCPP
}
// createCoverMap
NumericMatrix createCoverMap(const List& ls1, const List& ls2, const int d);
RcppExport SEXP _Mapper_createCoverMap(SEXP ls1SEXP, SEXP ls2SEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type ls1(ls1SEXP);
    Rcpp::traits::input_parameter< const List& >::type ls2(ls2SEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(createCoverMap(ls1, ls2, d));
    return rcpp_result_gen;
END_RCPP
}
// edgelist_to_adjacencylist
List edgelist_to_adjacencylist(const IntegerMatrix& el);
RcppExport SEXP _Mapper_edgelist_to_adjacencylist(SEXP elSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type el(elSEXP);
    rcpp_result_gen = Rcpp::wrap(edgelist_to_adjacencylist(el));
    return rcpp_result_gen;
END_RCPP
}
// findFirstEqual
int findFirstEqual(const IntegerVector& x, int value);
RcppExport SEXP _Mapper_findFirstEqual(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(findFirstEqual(x, value));
    return rcpp_result_gen;
END_RCPP
}
// nodeMap
IntegerMatrix nodeMap(const IntegerVector& node_lsfi1, const IntegerVector& node_lsfi2, const IntegerMatrix& cover_map);
RcppExport SEXP _Mapper_nodeMap(SEXP node_lsfi1SEXP, SEXP node_lsfi2SEXP, SEXP cover_mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type node_lsfi1(node_lsfi1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type node_lsfi2(node_lsfi2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type cover_map(cover_mapSEXP);
    rcpp_result_gen = Rcpp::wrap(nodeMap(node_lsfi1, node_lsfi2, cover_map));
    return rcpp_result_gen;
END_RCPP
}
// dist_subset
NumericVector dist_subset(const NumericVector& dist, IntegerVector idx);
RcppExport SEXP _Mapper_dist_subset(SEXP distSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_subset(dist, idx));
    return rcpp_result_gen;
END_RCPP
}
// concatDist
NumericVector concatDist(const NumericVector& dist, const int n_new, const NumericVector& new_dists);
RcppExport SEXP _Mapper_concatDist(SEXP distSEXP, SEXP n_newSEXP, SEXP new_distsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const int >::type n_new(n_newSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_dists(new_distsSEXP);
    rcpp_result_gen = Rcpp::wrap(concatDist(dist, n_new, new_dists));
    return rcpp_result_gen;
END_RCPP
}
// dist_from_to
NumericVector dist_from_to(const NumericMatrix& X_query, const NumericMatrix& X_ref);
RcppExport SEXP _Mapper_dist_from_to(SEXP X_querySEXP, SEXP X_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X_query(X_querySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X_ref(X_refSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_from_to(X_query, X_ref));
    return rcpp_result_gen;
END_RCPP
}
// createUpdateBlocks
NumericVector createUpdateBlocks(const List& G, const List& overlap_blocks, const int n_lvl_sets, const int n_blocks, const int n);
RcppExport SEXP _Mapper_createUpdateBlocks(SEXP GSEXP, SEXP overlap_blocksSEXP, SEXP n_lvl_setsSEXP, SEXP n_blocksSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const List& >::type overlap_blocks(overlap_blocksSEXP);
    Rcpp::traits::input_parameter< const int >::type n_lvl_sets(n_lvl_setsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_blocks(n_blocksSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(createUpdateBlocks(G, overlap_blocks, n_lvl_sets, n_blocks, n));
    return rcpp_result_gen;
END_RCPP
}
// something
NumericVector something(NumericVector x);
RcppExport SEXP _Mapper_something(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(something(x));
    return rcpp_result_gen;
END_RCPP
}
// construct_simplex_tree
List construct_simplex_tree(const IntegerMatrix& el, const int n_nodes);
RcppExport SEXP _Mapper_construct_simplex_tree(SEXP elSEXP, SEXP n_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type el(elSEXP);
    Rcpp::traits::input_parameter< const int >::type n_nodes(n_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_simplex_tree(el, n_nodes));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(const NumericMatrix& fv);
RcppExport SEXP _Mapper_timesTwo(SEXP fvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type fv(fvSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(fv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Mapper_edgeList_int", (DL_FUNC) &_Mapper_edgeList_int, 3},
    {"_Mapper_adjacencyCpp", (DL_FUNC) &_Mapper_adjacencyCpp, 3},
    {"_Mapper_intersectNodes", (DL_FUNC) &_Mapper_intersectNodes, 4},
    {"_Mapper_valid_pairs", (DL_FUNC) &_Mapper_valid_pairs, 1},
    {"_Mapper_constructFixedLevelSets", (DL_FUNC) &_Mapper_constructFixedLevelSets, 6},
    {"_Mapper_constructRestrainedLevelSets", (DL_FUNC) &_Mapper_constructRestrainedLevelSets, 5},
    {"_Mapper_createCoverMap", (DL_FUNC) &_Mapper_createCoverMap, 3},
    {"_Mapper_edgelist_to_adjacencylist", (DL_FUNC) &_Mapper_edgelist_to_adjacencylist, 1},
    {"_Mapper_findFirstEqual", (DL_FUNC) &_Mapper_findFirstEqual, 2},
    {"_Mapper_nodeMap", (DL_FUNC) &_Mapper_nodeMap, 3},
    {"_Mapper_dist_subset", (DL_FUNC) &_Mapper_dist_subset, 2},
    {"_Mapper_concatDist", (DL_FUNC) &_Mapper_concatDist, 3},
    {"_Mapper_dist_from_to", (DL_FUNC) &_Mapper_dist_from_to, 2},
    {"_Mapper_createUpdateBlocks", (DL_FUNC) &_Mapper_createUpdateBlocks, 5},
    {"_Mapper_something", (DL_FUNC) &_Mapper_something, 1},
    {"_Mapper_construct_simplex_tree", (DL_FUNC) &_Mapper_construct_simplex_tree, 2},
    {"_Mapper_timesTwo", (DL_FUNC) &_Mapper_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_Mapper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
